
#%*************************************************************************
#/chapter{Description of data}
#/section{Data overview}
#%*************************************************************************
rm(list=ls())
set.seed(1)
library(gdata)
library(hash)
library(glmnet)
library(corrplot)
library(XLConnect)
library(penalized)
print(sessionInfo(), l=F)

#working directory HAS to have subfolders /pro, /data and /result
setwd("P:/document/data") 


ori_dat <- read.xls("../data/______.xlsx", header=TRUE, sep=",", stringsAsFactors=F, check.names=F)

# the number after V should reflect the names of V variables (remove miRNA names)
indep_var <- paste("v", 4:757, sep="") #observe whether "v" in variable name is lower or upper case
# Dependent variables (copy here the names of dependent vars as in the excel file!) 

# *************************************************************************
# *************************************************************************

dep_var <- "dv" #copy here the next 0/1 coded dependent variable name from the source file
boot_num <- 1000		#number of bootstrap
n_fold <- 5			#number of cross-validation fold (5=20%)
lambda_label <- "min"  	#optimal lambda from cross-validation using (min or 1se) minimum or one standard error method
output <- "../result/name_" #change the index (last word in path), it will become heade word for the results files

# *************************************************************************
# *************************************************************************

#Modify the colum names to remove unusual characters.
update_dat <- ori_dat
col_names <- gsub("[<=/%() ]", "_", names(update_dat))
names(update_dat) <- col_names
(dep_var <- gsub("[<=/%() ]", "_", dep_var))

#remove sample with missing phenotype, remove variables with single value
update_dat <- subset(update_dat, !is.na(get(dep_var)))				#remove sample
rm_var <- names(which(apply(update_dat[indep_var], 2, function(x)
    length(table(x))<=1)))
length(rm_var)
update_dat <- subset(update_dat, select=!(names(update_dat) %in% rm_var))	#remove variable
dim(update_dat)
indep_var <- indep_var[!(indep_var %in% rm_var)]
num_var <- length(indep_var)

#statistics of missing rate of independent variable
miss_rate <- lapply(indep_var, FUN=function(x) {
    num_na <- length(which(is.na(update_dat[[x]])))
    return(cbind(num_na, dat_dim[1], round(num_na/dat_dim[1], 4)*100))
})
miss_rate <- data.frame(indep_var, do.call("rbind", miss_rate))
names(miss_rate) <- c("variable", "missing_num", "total_num", "missing_rate")

#%*************************************************************************
#/chapter{Variable selection with LASSO}
#%*************************************************************************
curr_dat <- update_dat[c(indep_var, dep_var)]
cc_dat <- as.matrix(curr_dat[complete.cases(curr_dat), ])
dim(cc_dat)

#LASSO using the full CC data
(cvfit <- optL1(cc_dat[, dep_var], cc_dat[, indep_var], fold=n_fold, trace=F))
(opt_lambda <- cvfit$lambda)
(opt_coef <- coefficients(cvfit$fullfit))
(select_var <- names(opt_coef)[-1])

#%*************************************************************************
#opt-variable-table-export
#%*************************************************************************
opt_coef_result <- data.frame(opt_coef)	
opt_coef_result <- cbind(rownames(opt_coef_result), opt_coef_result)
names(opt_coef_result) <- c("selected_var", "coefficients")
write.table(opt_coef_result, paste(output, "select_var_using_entire_data.csv", sep=""), sep=",", row.names=F)

#%*************************************************************************
#plot variable selection using PENALIZED package (coefficients vs. shrinkage parameter lambda).
#%*************************************************************************
pdf(paste(output,"Lasso_PENALIZED_full_data.pdf"))
full_fit <- penalized(cc_dat[, dep_var], cc_dat[, indep_var], lambda1=opt_lambda, steps=5, trace=F)
plotpath(full_fit, lwd=3, font=2, font.lab=2, log="x")
dev.off()

#%*************************************************************************
#Bootstrapping + LASSO variable selection
#%*************************************************************************
size <- nrow(cc_dat)
select_lambda <- NULL
var_hash <- hash()
for(i in 1:boot_num){
    bootstrap <- sample(1:size, replace=T)
    (uni_ratio <- length(unique(bootstrap))/length(bootstrap))
    #bootstrap <- bootstrap[!duplicated(bootstrap)]
    bs_dat <- cc_dat[bootstrap, ]
    dim(bs_dat)

    #choose lambda on each bootstrap sample
    bs_cvfit <- cv.glmnet(bs_dat[, indep_var], y=bs_dat[, dep_var], alpha=1, nlambda=100, #alpha=1 for lasso
                          family='binomial', type.measure="mse", nfolds=n_fold, standardize=F) #"deviance"
    if(lambda_label == "min") {
        select_lambda <- c(select_lambda, bs_cvfit$lambda.min)
        coef_fit <- as.matrix(coef(bs_cvfit, s="lambda.min"))
    } else if(lambda_label == "1se") {
        select_lambda <- c(select_lambda, bs_cvfit$lambda.1se)
        coef_fit <- as.matrix(coef(bs_cvfit, s="lambda.1se"))
    }
    (sign_nonzero <- sign(coef_fit[coef_fit!=0, ,drop=F]))
    select_vars <- rownames(sign_nonzero)
    for(j in 1:nrow(sign_nonzero)) {
        var <- select_vars[j]
        if(!has.key(var, var_hash)){
            var_hash[var] <- sign_nonzero[j, 1]
        }else {
            var_hash[var] <- c(var_hash[[var]], sign_nonzero[j, 1])
        }
    }
}

stat_nonzero <- lapply(keys(var_hash), FUN=function(x) data.frame(x, table(var_hash[[x]])))
stat_nonzero <- data.frame(do.call("rbind", stat_nonzero))
names(stat_nonzero) <- c("variable", "sign", "count")
stat_nonzero <- transform(stat_nonzero, frequency=round(count/boot_num, 4)*100, opposite_effect=duplicated(variable))
opp_vars <- stat_nonzero[stat_nonzero$opposite_effect, "variable"]	#variable name with opposite effect direction
stat_nonzero[stat_nonzero$variable %in% opp_vars, "opposite_effect"] <- TRUE
stat_nonzero <- stat_nonzero[order(stat_nonzero$frequency, decreasing=T),]	#sorting

# *************************************************************************
write.table(stat_nonzero, paste(output, paste("Lasso_IF_", "Lambda (" ,lambda_label, ")_boot_n=", boot_num,".csv", sep=""), sep=""),
            quote=F, sep=",", row.names=F)
# *************************************************************************